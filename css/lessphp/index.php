<?php
include_once(dirname(__FILE__). DIRECTORY_SEPARATOR .  "lessc.inc.php");

error_reporting(E_ALL);
ini_set("display_errors", true);
function error_handler($code, $message, $file, $line) {
    if (0 == error_reporting()) {
        return;
    }
    throw new ErrorException($message, 0, $code, $file, $line);
}
set_error_handler("error_handler");

header("Content-Type: text/css; charset=UTF-8");
header("Cache-Control: must-revalidate");

$query = "";
$input = "";

$root = $_SERVER["DOCUMENT_ROOT"];
if (isset($_SERVER["PATH_TRANSLATED"]) && $_SERVER["PATH_TRANSLATED"]) {
    $input = $_SERVER["PATH_TRANSLATED"];
} elseif (isset($_SERVER["QUERY_STRING"]) && $_SERVER["QUERY_STRING"]) {
    $input = parse_url("http://localhost/" . ltrim($_SERVER["QUERY_STRING"], "/"));
    $input = (is_array($input) && isset($input["path"]) ? $root . $input["path"] : "");
}

if (DIRECTORY_SEPARATOR != "/") {
    $input = str_replace(DIRECTORY_SEPARATOR, "/", $input);
    $root = str_replace(DIRECTORY_SEPARATOR, "/", $root);
}
$gzip = isset($_SERVER["HTTP_ACCEPT_ENCODING"]) && strpos($_SERVER["HTTP_ACCEPT_ENCODING"], "gzip") !== false;

try{

    if (!$input || strpos($input, $root) !== 0) {
        throw new Exception("Input less-file required", 403);
    }

    $ext = strtolower(pathinfo($input, PATHINFO_EXTENSION));
    if (!($ext == "css" || $ext == "less")) {
        throw new Exception("Input less-file required", 403);
    }

    if (!is_file($input)) {
        throw new Exception("File '$input' not exists", 404);
    }

    $output = dirname(__FILE__) . DIRECTORY_SEPARATOR . "cache" . DIRECTORY_SEPARATOR . "less" . urlencode(substr($input, strlen($root))). ".css";
    if (!is_writable(dirname($output))) {
        throw new Exception("Less cache '$output' is not writable");
    }

    $parse = true;
    if (!(!is_file($output) || filemtime($input) > filemtime($output))) {
        $mtime = filemtime($output);
        $css = file_get_contents($output);
        $files = array();
        if (preg_match("~^/\\*(\\{[^\\}]+\\})\\*/~", $css, $matches)) {
           $files = json_decode($matches[1]);
           $parse = false;
        }
        foreach ($files as $k =>$v) {
            if (!is_file($root . $k) || filemtime($root . $k) > $v) {
               $parse = true;
            }
        }
        if (!$parse) {
            if (isset($_SERVER["HTTP_IF_MODIFIED_SINCE"]) && strtotime($_SERVER["HTTP_IF_MODIFIED_SINCE"]) >= $mtime) {
                header("HTTP/1.0 304 Not Modified");
            } else {
                header("Last-Modified: " . gmdate("D, d M Y H:i:s", $mtime) . " GMT");
                if (function_exists("ob_gzhandler") && $gzip) {
                    ob_start("ob_gzhandler");
                }
                echo "/* Generated by LESS css compiler: " . gmdate("r", $mtime) . " */\n", $css;
            }
            return;
        }
    }

    if ($parse) {
        $less = new lessc();
        $less->setPreserveComments(true);

        $formatter = new lessc_formatter_classic;
        $formatter->disableSingle = true;
        $formatter->breakSelectors = true;
        $formatter->assignSeparator = ": ";
        $formatter->indentChar = "    ";
        $less->setFormatter($formatter);

        $css = $less->compileFile($input);
        $files = array();
        foreach($less->allParsedFiles() as $k => $v) {
           if (DIRECTORY_SEPARATOR != "/") {
              $k = str_replace(DIRECTORY_SEPARATOR, "/", $k);
           }
           $k = substr_replace($k, "", 0, strlen($root));
           $files[] = json_encode($k) . ":" . intval($v);
        }
        $files = implode(",\n", $files);
        $css = "/*{\n$files\n}*/\n"  . $css;
        file_put_contents($output, $css);
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
        if (function_exists("ob_gzhandler") && $gzip) {
            ob_start("ob_gzhandler");
        }
        echo "/* Generated by LESS css compiler: " . gmdate("r") . " */\n", $css;
        return;
    }

} catch (Exception $exception) {
    $statusCode = $exception->getCode();
    if ($statusCode != 403 && $statusCode != 404 && $statusCode != 500) {
        $statusCode = 500;
    }
    header("Content-Type: text/css; charset=UTF-8", true, $statusCode);
    echo "/* HTTP: $statusCode: ". $exception->getMessage() . " at " . $exception->getFile() . ":" . $exception->getLine(). " */";
}